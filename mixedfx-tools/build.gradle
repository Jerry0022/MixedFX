apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'

sourceCompatibility = 1.8
version = '1.0'
group = 'de.lantool'

repositories {
    mavenCentral()
    maven {
        url "https://repository.apache.org/content/repositories/snapshots"
    }
    maven {
    	url "http://dl.bintray.com/marytts/marytts"
    }
    maven { url "http://dl.bintray.com/dfki-lt/maven" }
    maven {	url "file:${System.env.GDRIVE}\\LanTool\\mvn-release"}
}

processResources {
  from ('src') {
    include '**/*.css'
    include '**/*.xml'
    include '**/*.exe'
  }
}

dependencies {
    compile group: 'commons-collections', name: 'commons-collections', version: '3.2'
     compile 'commons-codec:commons-codec:1.10'
    compile 'commons-io:commons-io:2.4'
    compile 'commons-beanutils:commons-beanutils:1.9.2'
    compile 'org.bushe:eventbus:1.4'
    compile 'org.apache.commons:commons-lang3:3.4'
    compile 'org.apache.logging.log4j:log4j-core:2.3'
    compile 'org.jfxtras:jfxtras-labs:8.0-r3'
    compile 'org.controlsfx:controlsfx:8.40.9'
    compile 'com.google.code.gson:gson:2.3.1'
    compile 'org.apache.commons:commons-configuration2:2.0-alpha1-SNAPSHOT'
    compile 'com.detectlanguage:detectlanguage:1.0.5'
   	compile	'commons-net:commons-net:3.3'
   	compile 'net.java.dev.jna:jna:4.1.0'
   	compile 'net.java.dev.jna:jna-platform:4.1.0'
   	compile 'org.icmp4j:icmp4j:1.0.0'
   	compile 'com.darkprograms:speech-api:1.0.0'
   	compile 'com.google.guava:guava:18.0'
   	compile 'commons-beanutils:commons-beanutils:1.9.2'
   	compile 'com.ibm.icu:icu4j:54.1.1'
   	compile 'de.dfki.mary:marytts:5.1.2'
   	compile 'de.dfki.mary:marytts-lang-de:5.1.2'
   	compile 'de.dfki.mary:marytts-lang-en:5.1.2'
   	compile 'de.dfki.mary:voice-cmu-slt-hsmm:5.1.2'
   	compile 'javaFlacEncoder:java-flac-encoder:0.3.1'
   	// For Executor to run commands AS ADMINISTRATOR
   	compile 'net.java.dev.jna:jna:4.1.0'
}

uploadArchives {
    repositories {
      	mavenDeployer {
            repository(url: "file:${System.env.GDRIVE}\\LanTool\\mvn-release")
        	}
   		}
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
